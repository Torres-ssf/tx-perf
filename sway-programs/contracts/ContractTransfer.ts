/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.0
  Forc version: 0.66.4
  Fuel-Core version: 0.40.1
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type TransferParamsInput = { recipient: IdentityInput, asset_id: AssetIdInput, amount: BigNumberish };
export type TransferParamsOutput = { recipient: IdentityOutput, asset_id: AssetIdOutput, amount: BN };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "struct TransferParams",
      "concreteTypeId": "d7bf44f3063123faf3ac9b1efd12b11533952dbce4ac4fc2fad51e729e956ab8",
      "metadataTypeId": 4
    },
    {
      "type": "struct std::vec::Vec<struct TransferParams>",
      "concreteTypeId": "5be2941cfebd785d801bdc93d1541bd402ba907683e2bf3b3ea4b0036bd504b6",
      "metadataTypeId": 9,
      "typeArguments": [
        "d7bf44f3063123faf3ac9b1efd12b11533952dbce4ac4fc2fad51e729e956ab8"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "b256",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 2
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 3
    },
    {
      "type": "struct TransferParams",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "recipient",
          "typeId": 1
        },
        {
          "name": "asset_id",
          "typeId": 6
        },
        {
          "name": "amount",
          "typeId": 10
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "ptr",
          "typeId": 3
        },
        {
          "name": "cap",
          "typeId": 10
        }
      ],
      "typeParameters": [
        2
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "buf",
          "typeId": 8,
          "typeArguments": [
            {
              "name": "",
              "typeId": 2
            }
          ]
        },
        {
          "name": "len",
          "typeId": 10
        }
      ],
      "typeParameters": [
        2
      ]
    },
    {
      "type": "u64",
      "metadataTypeId": 10
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "transfer_params",
          "concreteTypeId": "5be2941cfebd785d801bdc93d1541bd402ba907683e2bf3b3ea4b0036bd504b6"
        }
      ],
      "name": "execute_transfer",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class ContractTransferInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    execute_transfer: FunctionFragment;
  };
}

export class ContractTransfer extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: ContractTransferInterface;
  declare functions: {
    execute_transfer: InvokeFunction<[transfer_params: Vec<TransferParamsInput>], boolean>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
